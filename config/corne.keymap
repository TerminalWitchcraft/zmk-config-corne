#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEF 0
#define NAV 1
#define SYM 2
#define ADJ 3
#define EXTRA 4

/ {
    behaviors {
        caps: caps {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS";
            #binding-cells = <0>;
            continue-list = <MINUS BACKSPACE>;
        };

        angle_great: angle_great {
            compatible = "zmk,behavior-mod-morph";
            label = "ANGLE_GREAT";
            bindings = <&kp GREATER_THAN>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        angle_less: angle_less {
            compatible = "zmk,behavior-mod-morph";
            label = "ANGLE_LESS";
            bindings = <&kp LESS_THAN>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        equal_not: equal_not {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUAL_NOT";
            bindings = <&kp EQUAL>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        under_super: under_super {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDER_SUPER";
            bindings = <&kp UNDERSCORE>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        minus_plus: minus_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_PLUS";
            bindings = <&kp KP_MINUS>, <&kp KP_PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        and_or: and_or {
            compatible = "zmk,behavior-mod-morph";
            label = "AND_OR";
            bindings = <&kp AMPERSAND>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        at_percent: at_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "AT_PERCENT";
            bindings = <&kp AT_SIGN>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        div_mul: div_mul {
            compatible = "zmk,behavior-mod-morph";
            label = "DIV_MUL";
            bindings = <&kp KP_DIVIDE>, <&kp KP_ASTERISK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hash_dollar: hash_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "HASH_DOLLAR";
            bindings = <&kp POUND>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp KP_DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        question_exclaim: question_exclaim {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAIM";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        double_quote_single: double_quote_single {
            compatible = "zmk,behavior-mod-morph";
            label = "DOUBLE_QUOTE_SINGLE";
            bindings = <&kp DOUBLE_QUOTES>, <&kp SINGLE_QUOTE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        caps_shift: caps_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_SHIFT>, <&caps_word>;

            tapping-term-ms = <280>;
        };

        backspace: backspace {
            compatible = "zmk,behavior-hold-tap";
            label = "BACKSPACE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <230>;
            flavor = "balanced";
        };

        space: space {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <230>;
            flavor = "balanced";
        };
    };

    macros {
        vim_save: vim_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W &kp ENTER>;
            label = "VIM_SAVE";
        };

        vim_save_exit: vim_save_exit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W &kp Q &kp A &kp ENTER>;
            label = "VIM_SAVE_EXIT";
        };

        vim_exit_wo_save: vim_exit_wo_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(Z) &kp LS(Q)>;
            label = "VIM_EXIT_WO_SAVE";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_fslash {
            bindings = <&div_mul>;
            key-positions = <8 19>;
            timeout-ms = <60>;
        };

        combo_bslask {
            bindings = <&kp BACKSLASH>;
            key-positions = <8 21>;
            timeout-ms = <60>;
        };

        r_brack {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 15>;
            timeout-ms = <60>;
        };

        r_brack_l {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
            timeout-ms = <60>;
        };

        a_brack {
            bindings = <&angle_less>;
            key-positions = <27 28>;
            timeout-ms = <60>;
        };

        a_brack_l {
            bindings = <&angle_great>;
            key-positions = <31 32>;
            timeout-ms = <60>;
        };

        c_bracket {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <3 4>;
            timeout-ms = <60>;
        };

        c_brack_l {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
            timeout-ms = <60>;
        };

        equality {
            bindings = <&equal_not>;
            key-positions = <8 9>;
            timeout-ms = <60>;
        };

        combo_minus {
            bindings = <&minus_plus>;
            key-positions = <20 21>;
            timeout-ms = <60>;
        };

        combo_underscore {
            bindings = <&under_super>;
            key-positions = <33 32>;
            timeout-ms = <60>;
        };

        combo_and_or {
            bindings = <&at_percent>;
            key-positions = <14 15>;
            timeout-ms = <60>;
        };

        combo_at_percent {
            bindings = <&and_or>;
            key-positions = <2 3>;
            timeout-ms = <60>;
        };

        combo_hash_dollar {
            bindings = <&hash_dollar>;
            key-positions = <26 27>;
            timeout-ms = <60>;
        };

        grave_tidle {
            bindings = <&kp GRAVE>;
            key-positions = <3 16>;
            timeout-ms = <60>;
        };
    };

    //

    keymap {
        compatible = "zmk,keymap";

        Base {
            display-name = "Base";

            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&none  &kp W  &kp L  &kp Y       &kp P           &kp B               &kp Z        &kp F                       &kp O                &kp U        &double_quote_single  &mo 4
&caps  &kp C  &kp R  &kp S       &kp T           &kp G               &kp M        &kp N                       &kp E                &kp I        &kp A                 &none
&mo 2  &kp Q  &kp J  &kp V       &kp D           &kp K               &kp X        &kp H                       &dot_colon           &comma_semi  &question_exclaim     &to 3
                     &kp ESCAPE  &space 1 SPACE  &mt LEFT_ALT TAB    &caps_shift  &backspace RCTRL BACKSPACE  &mt RIGHT_GUI ENTER
            >;
        };

        nav {
            bindings = <
&trans  &trans          &kp LC(U)     &kp LC(D)      &kp LC(P)  &trans       &vim_save_exit     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &sk RIGHT_GUI      &trans
&trans  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN       &kp RIGHT  &trans       &kp KP_NUMBER_0    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &sk RIGHT_ALT      &trans
&trans  &trans          &kp PAGE_UP   &kp PAGE_DOWN  &kp LC(N)  &vim_save    &vim_exit_wo_save  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &sk RIGHT_CONTROL  &trans
                                      &trans         &trans     &trans       &trans             &trans           &trans
            >;

            label = "nav";
        };

        mouse {
            bindings = <
&trans  &trans  &trans          &mmv MOVE_UP    &trans           &trans       &trans  &trans          &msc SCRL_UP    &trans           &trans  &trans
&trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans       &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans          &trans          &trans           &trans       &trans  &trans          &trans          &trans           &trans  &trans
                                &mkp MCLK       &mkp LCLK        &mkp RCLK    &trans  &trans          &trans
            >;

            label = "mouse";
        };

        qwerty {
            display-name = "fallback";
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E    &kp R  &kp T         &kp Y    &kp U            &kp I      &kp O    &kp P     &kp BACKSPACE
&kp LSHFT  &kp A  &kp S  &kp D    &kp F  &kp G         &kp H    &kp J            &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Z  &kp X  &kp C    &kp V  &kp B         &kp N    &kp M            &kp COMMA  &kp DOT  &kp FSLH  &to 0
                         &kp TAB  &mo 0  &kp ESCAPE    &kp RET  &lt 4 BACKSPACE  &kp DEL
            >;
        };

        SYS {
            display-name = "System";
            bindings = <
&trans  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5            &kp F6  &kp F7  &kp F8  &kp F9  &kp F10      &trans
&trans  &kp F11       &kp F12       &trans        &trans        &studio_unlock    &trans  &trans  &trans  &trans  &trans       &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 4  &bt BT_CLR_ALL    &trans  &trans  &trans  &trans  &bootloader  &trans
                                    &trans        &trans        &trans            &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
